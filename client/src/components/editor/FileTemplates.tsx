import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { FilePlus, Code, Server, Database, Smartphone, Globe } from "lucide-react";
import type { Project } from "@shared/schema";

interface FileTemplatesProps {
  project: Project | null;
  selectedModel: string;
  onFileCreated: () => void;
}

export default function FileTemplates({ project, selectedModel, onFileCreated }: FileTemplatesProps) {
  const [fileName, setFileName] = useState("");
  const [templateType, setTemplateType] = useState("");
  const [framework, setFramework] = useState("");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const templates = {
    "react-component": {
      name: "React Component",
      icon: <Code className="w-4 h-4" />,
      description: "Functional React component with TypeScript",
      frameworks: ["react", "next.js", "vite"],
      extension: "tsx"
    },
    "api-route": {
      name: "API Route",
      icon: <Server className="w-4 h-4" />,
      description: "Express.js API endpoint with validation",
      frameworks: ["express", "fastify", "next.js"],
      extension: "ts"
    },
    "database-model": {
      name: "Database Model",
      icon: <Database className="w-4 h-4" />,
      description: "Database schema with Drizzle ORM",
      frameworks: ["drizzle", "prisma", "typeorm"],
      extension: "ts"
    },
    "mobile-screen": {
      name: "Mobile Screen",
      icon: <Smartphone className="w-4 h-4" />,
      description: "React Native screen component",
      frameworks: ["react-native", "expo"],
      extension: "tsx"
    },
    "web-page": {
      name: "Web Page",
      icon: <Globe className="w-4 h-4" />,
      description: "Complete web page with styling",
      frameworks: ["html", "react", "vue"],
      extension: "tsx"
    }
  };

  const createFileMutation = useMutation({
    mutationFn: async () => {
      const template = templates[templateType as keyof typeof templates];
      const instruction = `Create a ${template.name.toLowerCase()} called ${fileName} using ${framework}. ${template.description}. Follow best practices and include proper TypeScript types.`;
      
      // First create the file
      const fileResponse = await apiRequest(`/api/projects/${project?.id}/files`, "POST", {
        name: `${fileName}.${template.extension}`,
        language: template.extension === "tsx" ? "typescript" : "typescript",
        content: `// ${fileName}\n// Generated by ${selectedModel}\n\n// TODO: Implement ${template.name.toLowerCase()}`
      });

      // Then use AI to generate the actual content
      const aiResponse = await apiRequest(`/api/ai/edit-code`, "POST", {
        model: selectedModel,
        fileId: fileResponse.id,
        instruction,
        projectId: project?.id,
      });

      return aiResponse;
    },
    onSuccess: () => {
      toast({
        title: "File Created",
        description: `${fileName} has been created with AI-generated code.`,
      });
      queryClient.invalidateQueries({ queryKey: [`/api/projects/${project?.id}/files`] });
      onFileCreated();
      setFileName("");
      setTemplateType("");
      setFramework("");
    },
    onError: (error) => {
      toast({
        title: "Failed to Create File",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const selectedTemplate = templateType ? templates[templateType as keyof typeof templates] : null;

  return (
    <div className="p-4 space-y-4">
      <div className="flex items-center gap-2">
        <FilePlus className="w-4 h-4 text-primary" />
        <h3 className="text-sm font-medium">AI File Templates</h3>
        <Badge variant="outline" className="text-xs">
          {selectedModel}
        </Badge>
      </div>

      <div className="space-y-3">
        <Input
          placeholder="Enter file name..."
          value={fileName}
          onChange={(e) => setFileName(e.target.value)}
          className="bg-slate-700 border-slate-600"
        />

        <Select value={templateType} onValueChange={setTemplateType}>
          <SelectTrigger className="bg-slate-700 border-slate-600">
            <SelectValue placeholder="Select template type" />
          </SelectTrigger>
          <SelectContent>
            {Object.entries(templates).map(([key, template]) => (
              <SelectItem key={key} value={key}>
                <div className="flex items-center gap-2">
                  {template.icon}
                  <span>{template.name}</span>
                </div>
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        {selectedTemplate && (
          <Select value={framework} onValueChange={setFramework}>
            <SelectTrigger className="bg-slate-700 border-slate-600">
              <SelectValue placeholder="Select framework" />
            </SelectTrigger>
            <SelectContent>
              {selectedTemplate.frameworks.map((fw) => (
                <SelectItem key={fw} value={fw}>
                  {fw}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        )}

        {selectedTemplate && (
          <Card className="bg-slate-700 border-slate-600">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm flex items-center gap-2">
                {selectedTemplate.icon}
                {selectedTemplate.name}
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <p className="text-xs text-slate-300">{selectedTemplate.description}</p>
            </CardContent>
          </Card>
        )}

        <Button
          onClick={() => createFileMutation.mutate()}
          disabled={!fileName || !templateType || !framework || createFileMutation.isPending}
          className="w-full"
        >
          {createFileMutation.isPending ? "Generating..." : "Create with AI"}
        </Button>
      </div>
    </div>
  );
}